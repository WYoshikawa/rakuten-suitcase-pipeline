name: Daily Rakuten TOP100 Analysis
on:
  schedule:
    # 毎日1回（日本時間 朝9時）
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      analysis_mode:
        description: '分析モード'
        required: false
        default: 'full'
        type: choice
        options:
        - 'full'
        - 'basic'

# GitHub Actions に書き込み権限を付与
permissions:
  contents: write

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies (Lightweight)
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ 軽量化依存関係インストール完了"
      
      - name: Run TOP100 ranking data collection (Debug)
        env:
          APP_ID: ${{ secrets.APP_ID }}
        run: |
          echo "🦝 RASCAL TOP100 データ取得開始"
          echo "📊 APP_ID設定確認: ${APP_ID:0:10}..."
          echo "📁 実行前のファイル一覧:"
          ls -la
          
          echo "🐍 Pythonスクリプト実行開始"
          python rakuten_rank_step1.py --pages 1 || echo "Pythonスクリプトでエラー発生"
          echo "🐍 Pythonスクリプト実行終了"
          
          echo "📁 実行後のファイル一覧:"
          ls -la
          
          echo "📁 CSVファイル専用検索:"
          find . -name "*.csv" -type f -exec ls -la {} \; || echo "CSVファイル見つからず"
          
          echo "📁 rank_base関連ファイル検索:"
          find . -name "rank_base*" -type f -exec ls -la {} \; || echo "rank_baseファイル見つからず"
          
          echo "✅ データ取得ステップ完了"
      
      - name: Run comprehensive analysis
        run: |
          echo "🔍 分析機能は削除されました（データ取得のみ）"
          echo "✅ シンプル化完了"
      
      - name: Organize data files
        run: |
          echo "📁 デバッグ: 現在のディレクトリ内容"
          ls -la
          
          echo "📁 デバッグ: 全CSVファイル検索"
          find . -name "*.csv" -type f || echo "CSVファイルなし"
          
          echo "📁 デバッグ: rank_base_*パターン検索"
          ls -la rank_base_*.csv 2>/dev/null || echo "rank_base_*.csvなし"
          
          # データディレクトリ作成
          mkdir -p data
          mkdir -p data/changes
          
          # 日本時間でタイムスタンプ取得
          DATE=$(TZ='Asia/Tokyo' date +%Y-%m-%d)
          TIME=$(TZ='Asia/Tokyo' date +%H-%M)
          
          echo "📁 生成されたファイル確認:"
          ls -la rank_base_*.csv *.json 2>/dev/null || echo "一部ファイルなし"
          
          # CSVファイル保存（より柔軟な検索）
          if ls *.csv 1> /dev/null 2>&1; then
            echo "✅ CSVファイル発見、コピー開始"
            cp *.csv data/rank_base_${DATE}.csv
            cp *.csv data/rank_base_latest.csv
            echo "✅ CSVファイル保存完了"
          else
            echo "❌ CSVファイルが全く見つかりません"
            exit 1
          fi
          
          # 分析結果保存（削除）
          echo "📊 データ取得のみ - 分析機能は削除済み"
      
      - name: Validate data quality
        run: |
          echo "🔍 データ品質チェック中..."
          python -c "
          import pandas as pd
          import os
          
          if os.path.exists('data/rank_base_latest.csv'):
              df = pd.read_csv('data/rank_base_latest.csv')
              print(f'✅ データ品質OK: {len(df)}件取得')
              print(f'📊 価格範囲: ¥{df[\"itemPrice\"].min():,} - ¥{df[\"itemPrice\"].max():,}')
              
              # 30機能フラグの検証
              feature_cols = [col for col in df.columns if col.startswith(('has_', 'is_', 'for_', 'appeal_'))]
              print(f'🏷️ 機能フラグ: {len(feature_cols)}種類検出')
              
              if len(df) < 50:
                  print('⚠️ 警告: データ件数が少なすぎます')
                  exit(1)
          else:
              print('❌ データファイルが見つかりません')
              exit(1)
          "
      
      - name: Commit and push changes
        run: |
          git config --local user.email "rascal-top100@github.com"
          git config --local user.name "RASCAL TOP100 Bot"
          git add data/
          
          # 変更があるかチェック
          if git diff --staged --quiet; then
            echo "📝 変更なし - コミットをスキップ"
          else
            # コミットメッセージの生成
            ITEMS_COUNT=$(python -c "
            import pandas as pd
            try:
                df = pd.read_csv('data/rank_base_latest.csv')
                print(len(df))
            except:
                print('?')
            ")
            
            git commit -m "📊 Daily TOP100 data collection: ${ITEMS_COUNT}件取得完了 $(TZ='Asia/Tokyo' date +%Y-%m-%d_%H:%M)"
            git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            echo "✅ データ更新・プッシュ完了"
          fi
      
      - name: Analysis summary
        run: |
          echo ""
          echo "🦝============================================"
          echo "🦝 RASCAL TOP100 データ取得版 実行完了"
          echo "🦝============================================"
          echo "📊 楽天スーツケースTOP100データ取得"
          echo "🏷️ 30種類機能フラグ検出"
          echo "💾 CSVファイル保存"
          echo "🎯 分析機能なし（データ取得特化）"
          echo "⚡ 超高速・超安定"
          echo "🦝============================================"
